{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xc4a02Ec33987d9051d21e6bB8758D0734B9BE30B",
    "txHash": "0xd721c36d25656e24bd9dacdde9a40eb774ef40d651b30420831bbb696730b339"
  },
  "proxies": [
    {
      "address": "0xdD4d936bAd4a4A89F850D1AF7c98beEA988c07c5",
      "txHash": "0xc6774c455548a32fe0e69ac6151a54224275e70312f8c56b419c63152ba73a74",
      "kind": "transparent"
    },
    {
      "address": "0x5e4cF53c3337199Fce53B67E641a74E11fCcE5FA",
      "txHash": "0x788814c34eb1e2bc57526ff207a7623573fced40106f9a184227ba24351ba9f0",
      "kind": "transparent"
    },
    {
      "address": "0x194E1ec01df347783482d6Bdc9D65D70C9D87961",
      "txHash": "0x47e5ff6205d86f5f73c0f3db219dcc8d8c733c7e7b5463e903ac3a2a73464e14",
      "kind": "transparent"
    },
    {
      "address": "0x248E2D3f5Decf6f7159EcC4C65d5eFbBDd9Be433",
      "txHash": "0xa9c6ad1d862002b263e413fb74b0ca36e1ec91899984f7cc7464ee7bc0d697a8",
      "kind": "transparent"
    },
    {
      "address": "0xbeD1e8B430FD512b82A18cb121a8442F3889E505",
      "txHash": "0x95be5b72869d9420529abbd80fd143b86304055aa260d1ec735fc67674eee931",
      "kind": "transparent"
    },
    {
      "address": "0x317e19Fe3DB508f1A45421379FBbd7564d0259c0",
      "txHash": "0x58dc89339a5cd47057c5cdd3c919a27f5ecece45c532dd8516654d427f90d56d",
      "kind": "transparent"
    },
    {
      "address": "0x578bc56a145A3464Adc44635C23501653138c946",
      "txHash": "0x9ae4030e8495f97351407b710603f6c24569cc78d8932493b304dd8c86b181d2",
      "kind": "transparent"
    }
  ],
  "impls": {
    "f25d7c6e51eeeb8b66fad58108ced8d7bebe0bfd5036b966684ee08d6fdd55b5": {
      "address": "0xC2778b51D5D620C8e2946A0d8D30e3b09176673c",
      "txHash": "0x383df0c40ba201beaa9aaca7c5a309a0406ce66f4cece739f8fd67ae4cb287da",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_vaultStorage",
            "offset": 0,
            "slot": "151",
            "type": "t_struct(VaultStorage)9286_storage",
            "contract": "NftVault",
            "src": "contracts/stakednft/NftVault.sol:22"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IApeCoinStaking)8581": {
            "label": "contract IApeCoinStaking",
            "numberOfBytes": "20"
          },
          "t_contract(IDelegateRegistryV2)8785": {
            "label": "contract IDelegateRegistryV2",
            "numberOfBytes": "20"
          },
          "t_contract(IDelegationRegistry)9008": {
            "label": "contract IDelegationRegistry",
            "numberOfBytes": "20"
          },
          "t_contract(IERC20Upgradeable)628": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_int256": {
            "label": "int256",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Position)9296_storage))": {
            "label": "mapping(address => mapping(address => struct INftVault.Position))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Refund)9291_storage))": {
            "label": "mapping(address => mapping(address => struct INftVault.Refund))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UintSet)4389_storage))": {
            "label": "mapping(address => mapping(address => struct EnumerableSetUpgradeable.UintSet))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(NftStatus)9235_storage))": {
            "label": "mapping(address => mapping(uint256 => struct INftVault.NftStatus))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Position)9296_storage)": {
            "label": "mapping(address => struct INftVault.Position)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Refund)9291_storage)": {
            "label": "mapping(address => struct INftVault.Refund)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UintSet)4389_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NftStatus)9235_storage)": {
            "label": "mapping(uint256 => struct INftVault.NftStatus)",
            "numberOfBytes": "32"
          },
          "t_struct(NftStatus)9235_storage": {
            "label": "struct INftVault.NftStatus",
            "members": [
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "staker",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Position)9296_storage": {
            "label": "struct INftVault.Position",
            "members": [
              {
                "label": "stakedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rewardsDebt",
                "type": "t_int256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Refund)9291_storage": {
            "label": "struct INftVault.Refund",
            "members": [
              {
                "label": "principal",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "reward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Set)3917_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(UintSet)4389_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3917_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(VaultStorage)9286_storage": {
            "label": "struct INftVault.VaultStorage",
            "members": [
              {
                "label": "nfts",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(NftStatus)9235_storage))",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "refunds",
                "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Refund)9291_storage))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Position)9296_storage))",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "stakingTokenIds",
                "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UintSet)4389_storage))",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "apeCoinStaking",
                "type": "t_contract(IApeCoinStaking)8581",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "wrapApeCoin",
                "type": "t_contract(IERC20Upgradeable)628",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "bayc",
                "type": "t_address",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "mayc",
                "type": "t_address",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "bakc",
                "type": "t_address",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "delegationRegistry",
                "type": "t_contract(IDelegationRegistry)9008",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "authorized",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "10"
              },
              {
                "label": "delegationRegistryV2",
                "type": "t_contract(IDelegateRegistryV2)8785",
                "offset": 0,
                "slot": "11"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "5ad740468e74b972dcb9204d3add45de3c023f380b8cfae1413894301edd7bc4": {
      "address": "0xfa679De341ECFbAF6FdD5c6B39A7050643d00588",
      "txHash": "0xe1a4fc0de0b32fed70e1c3224326332f000837aafb208978feca5879f5080bde",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_vaultStorage",
            "offset": 0,
            "slot": "151",
            "type": "t_struct(VaultStorage)9286_storage",
            "contract": "NftVault",
            "src": "contracts/stakednft/NftVault.sol:22"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IApeCoinStaking)8581": {
            "label": "contract IApeCoinStaking",
            "numberOfBytes": "20"
          },
          "t_contract(IDelegateRegistryV2)8785": {
            "label": "contract IDelegateRegistryV2",
            "numberOfBytes": "20"
          },
          "t_contract(IDelegationRegistry)9008": {
            "label": "contract IDelegationRegistry",
            "numberOfBytes": "20"
          },
          "t_contract(IERC20Upgradeable)628": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_int256": {
            "label": "int256",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Position)9296_storage))": {
            "label": "mapping(address => mapping(address => struct INftVault.Position))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Refund)9291_storage))": {
            "label": "mapping(address => mapping(address => struct INftVault.Refund))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UintSet)4389_storage))": {
            "label": "mapping(address => mapping(address => struct EnumerableSetUpgradeable.UintSet))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(NftStatus)9235_storage))": {
            "label": "mapping(address => mapping(uint256 => struct INftVault.NftStatus))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Position)9296_storage)": {
            "label": "mapping(address => struct INftVault.Position)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Refund)9291_storage)": {
            "label": "mapping(address => struct INftVault.Refund)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UintSet)4389_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NftStatus)9235_storage)": {
            "label": "mapping(uint256 => struct INftVault.NftStatus)",
            "numberOfBytes": "32"
          },
          "t_struct(NftStatus)9235_storage": {
            "label": "struct INftVault.NftStatus",
            "members": [
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "staker",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Position)9296_storage": {
            "label": "struct INftVault.Position",
            "members": [
              {
                "label": "stakedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rewardsDebt",
                "type": "t_int256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Refund)9291_storage": {
            "label": "struct INftVault.Refund",
            "members": [
              {
                "label": "principal",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "reward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Set)3917_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(UintSet)4389_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3917_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(VaultStorage)9286_storage": {
            "label": "struct INftVault.VaultStorage",
            "members": [
              {
                "label": "nfts",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(NftStatus)9235_storage))",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "refunds",
                "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Refund)9291_storage))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Position)9296_storage))",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "stakingTokenIds",
                "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UintSet)4389_storage))",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "apeCoinStaking",
                "type": "t_contract(IApeCoinStaking)8581",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "wrapApeCoin",
                "type": "t_contract(IERC20Upgradeable)628",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "bayc",
                "type": "t_address",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "mayc",
                "type": "t_address",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "bakc",
                "type": "t_address",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "delegationRegistry",
                "type": "t_contract(IDelegationRegistry)9008",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "authorized",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "10"
              },
              {
                "label": "delegationRegistryV2",
                "type": "t_contract(IDelegateRegistryV2)8785",
                "offset": 0,
                "slot": "11"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "e73d0ddf76eb826332b3c637ea21554917506742348fcb6e8fce0e4e1a5a6359": {
      "address": "0xA89479bf220C2FA8CCE0666300Bd82112033664a",
      "txHash": "0x60df7647a910e2fd45721d6d99fa48e23a427b389307f82d08cfd80580219d3b",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_vaultStorage",
            "offset": 0,
            "slot": "151",
            "type": "t_struct(VaultStorage)9286_storage",
            "contract": "NftVault",
            "src": "contracts/stakednft/NftVault.sol:22"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IApeCoinStaking)8581": {
            "label": "contract IApeCoinStaking",
            "numberOfBytes": "20"
          },
          "t_contract(IDelegateRegistryV2)8785": {
            "label": "contract IDelegateRegistryV2",
            "numberOfBytes": "20"
          },
          "t_contract(IDelegationRegistry)9008": {
            "label": "contract IDelegationRegistry",
            "numberOfBytes": "20"
          },
          "t_contract(IERC20Upgradeable)628": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_int256": {
            "label": "int256",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Position)9296_storage))": {
            "label": "mapping(address => mapping(address => struct INftVault.Position))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Refund)9291_storage))": {
            "label": "mapping(address => mapping(address => struct INftVault.Refund))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UintSet)4389_storage))": {
            "label": "mapping(address => mapping(address => struct EnumerableSetUpgradeable.UintSet))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(NftStatus)9235_storage))": {
            "label": "mapping(address => mapping(uint256 => struct INftVault.NftStatus))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Position)9296_storage)": {
            "label": "mapping(address => struct INftVault.Position)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Refund)9291_storage)": {
            "label": "mapping(address => struct INftVault.Refund)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UintSet)4389_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NftStatus)9235_storage)": {
            "label": "mapping(uint256 => struct INftVault.NftStatus)",
            "numberOfBytes": "32"
          },
          "t_struct(NftStatus)9235_storage": {
            "label": "struct INftVault.NftStatus",
            "members": [
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "staker",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Position)9296_storage": {
            "label": "struct INftVault.Position",
            "members": [
              {
                "label": "stakedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "rewardsDebt",
                "type": "t_int256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Refund)9291_storage": {
            "label": "struct INftVault.Refund",
            "members": [
              {
                "label": "principal",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "reward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Set)3917_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(UintSet)4389_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3917_storage",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(VaultStorage)9286_storage": {
            "label": "struct INftVault.VaultStorage",
            "members": [
              {
                "label": "nfts",
                "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(NftStatus)9235_storage))",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "refunds",
                "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Refund)9291_storage))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Position)9296_storage))",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "stakingTokenIds",
                "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UintSet)4389_storage))",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "apeCoinStaking",
                "type": "t_contract(IApeCoinStaking)8581",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "wrapApeCoin",
                "type": "t_contract(IERC20Upgradeable)628",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "bayc",
                "type": "t_address",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "mayc",
                "type": "t_address",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "bakc",
                "type": "t_address",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "delegationRegistry",
                "type": "t_contract(IDelegationRegistry)9008",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "authorized",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "10"
              },
              {
                "label": "delegationRegistryV2",
                "type": "t_contract(IDelegateRegistryV2)8785",
                "offset": 0,
                "slot": "11"
              }
            ],
            "numberOfBytes": "384"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "a4e62c23bfcf59064325dbf849bf907cc03223f558cd8b71c93b1a3d76bf236d": {
      "address": "0x2Dbc3FECc66634860F4809cDe9900102582D8A56",
      "txHash": "0xfd5e18e819922d2a98a994a51c2f61fb8fea8d77fba04925f94af1b22167d57c",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "101",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "102",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "103",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "105",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "106",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "107",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:517"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "201",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "202",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "label": "_nft",
            "offset": 0,
            "slot": "301",
            "type": "t_contract(IERC721MetadataUpgradeable)3933",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:18"
          },
          {
            "label": "nftVault",
            "offset": 0,
            "slot": "302",
            "type": "t_contract(INftVault)19104",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:19"
          },
          {
            "label": "_stakedTokens",
            "offset": 0,
            "slot": "303",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:22"
          },
          {
            "label": "_stakedTokensIndex",
            "offset": 0,
            "slot": "304",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:25"
          },
          {
            "label": "totalStaked",
            "offset": 0,
            "slot": "305",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:28"
          },
          {
            "label": "_customBaseURI",
            "offset": 0,
            "slot": "306",
            "type": "t_string_storage",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:30"
          },
          {
            "label": "_authorized",
            "offset": 0,
            "slot": "307",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:32"
          },
          {
            "label": "bnftRegistry",
            "offset": 0,
            "slot": "308",
            "type": "t_contract(IBNFTRegistry)18142",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:34"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IBNFTRegistry)18142": {
            "label": "contract IBNFTRegistry",
            "numberOfBytes": "20"
          },
          "t_contract(IERC721MetadataUpgradeable)3933": {
            "label": "contract IERC721MetadataUpgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(INftVault)19104": {
            "label": "contract INftVault",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "fecf03e5ff39c1e3ee5100bba45fbd97b9e26f604ec0ca628b6e6391a9c39960": {
      "address": "0xEC553663d527dC7D1Af7557ae0527c1F4AB84fe2",
      "txHash": "0xdf2520d67eb7e9a48b79edb6fb1bf348d71ee67d298a3d2456216ff3e8f600be",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "101",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "102",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "103",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "105",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "106",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "107",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:517"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "201",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "202",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "label": "_nft",
            "offset": 0,
            "slot": "301",
            "type": "t_contract(IERC721MetadataUpgradeable)3933",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:18"
          },
          {
            "label": "nftVault",
            "offset": 0,
            "slot": "302",
            "type": "t_contract(INftVault)19104",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:19"
          },
          {
            "label": "_stakedTokens",
            "offset": 0,
            "slot": "303",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:22"
          },
          {
            "label": "_stakedTokensIndex",
            "offset": 0,
            "slot": "304",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:25"
          },
          {
            "label": "totalStaked",
            "offset": 0,
            "slot": "305",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:28"
          },
          {
            "label": "_customBaseURI",
            "offset": 0,
            "slot": "306",
            "type": "t_string_storage",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:30"
          },
          {
            "label": "_authorized",
            "offset": 0,
            "slot": "307",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:32"
          },
          {
            "label": "bnftRegistry",
            "offset": 0,
            "slot": "308",
            "type": "t_contract(IBNFTRegistry)18142",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:34"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IBNFTRegistry)18142": {
            "label": "contract IBNFTRegistry",
            "numberOfBytes": "20"
          },
          "t_contract(IERC721MetadataUpgradeable)3933": {
            "label": "contract IERC721MetadataUpgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(INftVault)19104": {
            "label": "contract INftVault",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "a485f5704da88b2b631a989a91e6fb81db486c41951134e0ab47a068b3684cea": {
      "address": "0xc0C21A3a6FaB38714e4f5ED4924f86779aC5241A",
      "txHash": "0x2a54de8349f6d38ff5fb96b1cd4ebb1d72a16d7736edfd45d1b242dcf50eae24",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "101",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "102",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "103",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "105",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "106",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "107",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:517"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "201",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "202",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "254",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "label": "_nft",
            "offset": 0,
            "slot": "301",
            "type": "t_contract(IERC721MetadataUpgradeable)3933",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:18"
          },
          {
            "label": "nftVault",
            "offset": 0,
            "slot": "302",
            "type": "t_contract(INftVault)19104",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:19"
          },
          {
            "label": "_stakedTokens",
            "offset": 0,
            "slot": "303",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:22"
          },
          {
            "label": "_stakedTokensIndex",
            "offset": 0,
            "slot": "304",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:25"
          },
          {
            "label": "totalStaked",
            "offset": 0,
            "slot": "305",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:28"
          },
          {
            "label": "_customBaseURI",
            "offset": 0,
            "slot": "306",
            "type": "t_string_storage",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:30"
          },
          {
            "label": "_authorized",
            "offset": 0,
            "slot": "307",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:32"
          },
          {
            "label": "bnftRegistry",
            "offset": 0,
            "slot": "308",
            "type": "t_contract(IBNFTRegistry)18142",
            "contract": "StNft",
            "src": "contracts/stakednft/StNft.sol:34"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IBNFTRegistry)18142": {
            "label": "contract IBNFTRegistry",
            "numberOfBytes": "20"
          },
          "t_contract(IERC721MetadataUpgradeable)3933": {
            "label": "contract IERC721MetadataUpgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(INftVault)19104": {
            "label": "contract INftVault",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "76f053e2c59a3f96acbfad4c5e80b15f78cb90fec3eed1e908c38e0d96b16bfd": {
      "address": "0xBccC7a1E79215EC3FD36824615801BCeE0Df2eC3",
      "txHash": "0xbc1bf7d41287888a223f5908d3263898d6c1cb79659a37133100923c5871363c",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "101",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "201",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "202",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "251",
            "type": "t_contract(IERC20Upgradeable)1367",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:34"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "251",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:35"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:295"
          },
          {
            "label": "apeCoinStaking",
            "offset": 0,
            "slot": "301",
            "type": "t_contract(IApeCoinStaking)18130",
            "contract": "BendCoinPool",
            "src": "contracts/BendCoinPool.sol:26"
          },
          {
            "label": "wrapApeCoin",
            "offset": 0,
            "slot": "302",
            "type": "t_contract(IERC20Upgradeable)1367",
            "contract": "BendCoinPool",
            "src": "contracts/BendCoinPool.sol:27"
          },
          {
            "label": "staker",
            "offset": 0,
            "slot": "303",
            "type": "t_contract(IStakeManager)19398",
            "contract": "BendCoinPool",
            "src": "contracts/BendCoinPool.sol:28"
          },
          {
            "label": "pendingApeCoin",
            "offset": 0,
            "slot": "304",
            "type": "t_uint256",
            "contract": "BendCoinPool",
            "src": "contracts/BendCoinPool.sol:30"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IApeCoinStaking)18130": {
            "label": "contract IApeCoinStaking",
            "numberOfBytes": "20"
          },
          "t_contract(IERC20Upgradeable)1367": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IStakeManager)19398": {
            "label": "contract IStakeManager",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "34993c67c2ee56f2d62f5fd3bbfb3424243e4970c7902299a45a143d57fbf5d9": {
      "address": "0x30d190032A34d6151073a7DB8793c01Aa05987ec",
      "txHash": "0x23941c6b8b217f181afc6e402f3a0571487f6312b7bf8f042fff94f0a0d4f99f",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "151",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "apeCoinStaking",
            "offset": 0,
            "slot": "201",
            "type": "t_contract(IApeCoinStaking)18130",
            "contract": "BendNftPool",
            "src": "contracts/BendNftPool.sol:24"
          },
          {
            "label": "wrapApeCoin",
            "offset": 0,
            "slot": "202",
            "type": "t_contract(IERC20Upgradeable)1367",
            "contract": "BendNftPool",
            "src": "contracts/BendNftPool.sol:25"
          },
          {
            "label": "poolStates",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_address,t_struct(PoolState)18614_storage)",
            "contract": "BendNftPool",
            "src": "contracts/BendNftPool.sol:26"
          },
          {
            "label": "staker",
            "offset": 0,
            "slot": "204",
            "type": "t_contract(IStakeManager)19398",
            "contract": "BendNftPool",
            "src": "contracts/BendNftPool.sol:27"
          },
          {
            "label": "coinPool",
            "offset": 0,
            "slot": "205",
            "type": "t_contract(ICoinPool)18270",
            "contract": "BendNftPool",
            "src": "contracts/BendNftPool.sol:28"
          },
          {
            "label": "bayc",
            "offset": 0,
            "slot": "206",
            "type": "t_address",
            "contract": "BendNftPool",
            "src": "contracts/BendNftPool.sol:29"
          },
          {
            "label": "mayc",
            "offset": 0,
            "slot": "207",
            "type": "t_address",
            "contract": "BendNftPool",
            "src": "contracts/BendNftPool.sol:30"
          },
          {
            "label": "bakc",
            "offset": 0,
            "slot": "208",
            "type": "t_address",
            "contract": "BendNftPool",
            "src": "contracts/BendNftPool.sol:31"
          },
          {
            "label": "bnftRegistry",
            "offset": 0,
            "slot": "209",
            "type": "t_contract(IBNFTRegistry)18142",
            "contract": "BendNftPool",
            "src": "contracts/BendNftPool.sol:32"
          },
          {
            "label": "v2AddressProvider",
            "offset": 0,
            "slot": "210",
            "type": "t_contract(IAddressProviderV2)18157",
            "contract": "BendNftPool",
            "src": "contracts/BendNftPool.sol:33"
          },
          {
            "label": "v2PoolManager",
            "offset": 0,
            "slot": "211",
            "type": "t_address",
            "contract": "BendNftPool",
            "src": "contracts/BendNftPool.sol:34"
          },
          {
            "label": "v2PoolLens",
            "offset": 0,
            "slot": "212",
            "type": "t_contract(IPoolLensV2)18190",
            "contract": "BendNftPool",
            "src": "contracts/BendNftPool.sol:35"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IAddressProviderV2)18157": {
            "label": "contract IAddressProviderV2",
            "numberOfBytes": "20"
          },
          "t_contract(IApeCoinStaking)18130": {
            "label": "contract IApeCoinStaking",
            "numberOfBytes": "20"
          },
          "t_contract(IBNFTRegistry)18142": {
            "label": "contract IBNFTRegistry",
            "numberOfBytes": "20"
          },
          "t_contract(ICoinPool)18270": {
            "label": "contract ICoinPool",
            "numberOfBytes": "20"
          },
          "t_contract(IERC20Upgradeable)1367": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IPoolLensV2)18190": {
            "label": "contract IPoolLensV2",
            "numberOfBytes": "20"
          },
          "t_contract(IStakeManager)19398": {
            "label": "contract IStakeManager",
            "numberOfBytes": "20"
          },
          "t_contract(IStakedNft)19524": {
            "label": "contract IStakedNft",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_struct(PoolState)18614_storage)": {
            "label": "mapping(address => struct INftPool.PoolState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(PoolState)18614_storage": {
            "label": "struct INftPool.PoolState",
            "members": [
              {
                "label": "stakedNft",
                "type": "t_contract(IStakedNft)19524",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "accumulatedRewardsPerNft",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "rewardsDebt",
                "type": "t_mapping(t_uint256,t_uint256)",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "pendingApeCoin",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "e59e5f62004445203beb27d0e6469a2bd696dc38ad07d1d8102ae602fc272790": {
      "address": "0x15596C27900e12A9cfC301248E21888751f61c19",
      "txHash": "0x41eddce257212a7c041b306b16ada6d48b1a9e1f1fe56e10d37dad9754360104",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "101",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_stakerStorage",
            "offset": 0,
            "slot": "151",
            "type": "t_struct(StakerStorage)15301_storage",
            "contract": "BendStakeManager",
            "src": "contracts/BendStakeManager.sol:53"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IApeCoinStaking)18143": {
            "label": "contract IApeCoinStaking",
            "numberOfBytes": "20"
          },
          "t_contract(ICoinPool)18283": {
            "label": "contract ICoinPool",
            "numberOfBytes": "20"
          },
          "t_contract(IERC20Upgradeable)1367": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(INftPool)18719": {
            "label": "contract INftPool",
            "numberOfBytes": "20"
          },
          "t_contract(INftVault)19117": {
            "label": "contract INftVault",
            "numberOfBytes": "20"
          },
          "t_contract(IRewardsStrategy)19125": {
            "label": "contract IRewardsStrategy",
            "numberOfBytes": "20"
          },
          "t_contract(IStakedNft)19537": {
            "label": "contract IStakedNft",
            "numberOfBytes": "20"
          },
          "t_contract(IWithdrawStrategy)19561": {
            "label": "contract IWithdrawStrategy",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_contract(IRewardsStrategy)19125)": {
            "label": "mapping(address => contract IRewardsStrategy)",
            "numberOfBytes": "32"
          },
          "t_struct(StakerStorage)15301_storage": {
            "label": "struct BendStakeManager.StakerStorage",
            "members": [
              {
                "label": "rewardsStrategies",
                "type": "t_mapping(t_address,t_contract(IRewardsStrategy)19125)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "withdrawStrategy",
                "type": "t_contract(IWithdrawStrategy)19561",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "feeRecipient",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "pendingFeeAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "apeCoinPoolStakedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "apeCoinStaking",
                "type": "t_contract(IApeCoinStaking)18143",
                "offset": 0,
                "slot": "6"
              },
              {
                "label": "wrapApeCoin",
                "type": "t_contract(IERC20Upgradeable)1367",
                "offset": 0,
                "slot": "7"
              },
              {
                "label": "nftVault",
                "type": "t_contract(INftVault)19117",
                "offset": 0,
                "slot": "8"
              },
              {
                "label": "coinPool",
                "type": "t_contract(ICoinPool)18283",
                "offset": 0,
                "slot": "9"
              },
              {
                "label": "nftPool",
                "type": "t_contract(INftPool)18719",
                "offset": 0,
                "slot": "10"
              },
              {
                "label": "stBayc",
                "type": "t_contract(IStakedNft)19537",
                "offset": 0,
                "slot": "11"
              },
              {
                "label": "stMayc",
                "type": "t_contract(IStakedNft)19537",
                "offset": 0,
                "slot": "12"
              },
              {
                "label": "stBakc",
                "type": "t_contract(IStakedNft)19537",
                "offset": 0,
                "slot": "13"
              },
              {
                "label": "bayc",
                "type": "t_address",
                "offset": 0,
                "slot": "14"
              },
              {
                "label": "mayc",
                "type": "t_address",
                "offset": 0,
                "slot": "15"
              },
              {
                "label": "bakc",
                "type": "t_address",
                "offset": 0,
                "slot": "16"
              },
              {
                "label": "botAdmin",
                "type": "t_address",
                "offset": 0,
                "slot": "17"
              }
            ],
            "numberOfBytes": "576"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "faf648b95f35b7a31412e476ad356bef6762b67fe68619266d04335bb553f118": {
      "address": "0x1C9Ef41AC8aEC7Ec1A9F03e42AEcAF433629fEE6",
      "txHash": "0xef10fc45aac00ec821a15d377b1496a7678f4bf79351bb26a89ad8ea60f4afee",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "101",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "201",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "202",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "251",
            "type": "t_contract(IERC20Upgradeable)1367",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:34"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "251",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:35"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:295"
          },
          {
            "label": "apeCoinStaking",
            "offset": 0,
            "slot": "301",
            "type": "t_contract(IApeCoinStaking)4523",
            "contract": "BendCoinPool",
            "src": "contracts/BendCoinPool.sol:26"
          },
          {
            "label": "wrapApeCoin",
            "offset": 0,
            "slot": "302",
            "type": "t_contract(IERC20Upgradeable)1367",
            "contract": "BendCoinPool",
            "src": "contracts/BendCoinPool.sol:27"
          },
          {
            "label": "staker",
            "offset": 0,
            "slot": "303",
            "type": "t_contract(IStakeManager)4897",
            "contract": "BendCoinPool",
            "src": "contracts/BendCoinPool.sol:28"
          },
          {
            "label": "pendingApeCoin",
            "offset": 0,
            "slot": "304",
            "type": "t_uint256",
            "contract": "BendCoinPool",
            "src": "contracts/BendCoinPool.sol:30"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IApeCoinStaking)4523": {
            "label": "contract IApeCoinStaking",
            "numberOfBytes": "20"
          },
          "t_contract(IERC20Upgradeable)1367": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IStakeManager)4897": {
            "label": "contract IStakeManager",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "e60085896706d408611b2e9a0a4cdd24e4e1ad4db74c547bf35c46db87edcbda": {
      "address": "0x37A76Db446bDB3EF1b73112a8D5E6868de06464f",
      "txHash": "0x84a8611eea3adf5e68dc6c3f2c9eb1c12ca3da79f80e4fce146f738724460dfd",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "101",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "201",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "202",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "251",
            "type": "t_contract(IERC20Upgradeable)1367",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:34"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "251",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:35"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:295"
          },
          {
            "label": "apeCoinStaking",
            "offset": 0,
            "slot": "301",
            "type": "t_contract(IApeCoinStaking)4531",
            "contract": "BendCoinPool",
            "src": "contracts/BendCoinPool.sol:26"
          },
          {
            "label": "wrapApeCoin",
            "offset": 0,
            "slot": "302",
            "type": "t_contract(IERC20Upgradeable)1367",
            "contract": "BendCoinPool",
            "src": "contracts/BendCoinPool.sol:27"
          },
          {
            "label": "staker",
            "offset": 0,
            "slot": "303",
            "type": "t_contract(IStakeManager)4905",
            "contract": "BendCoinPool",
            "src": "contracts/BendCoinPool.sol:28"
          },
          {
            "label": "pendingApeCoin",
            "offset": 0,
            "slot": "304",
            "type": "t_uint256",
            "contract": "BendCoinPool",
            "src": "contracts/BendCoinPool.sol:30"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IApeCoinStaking)4531": {
            "label": "contract IApeCoinStaking",
            "numberOfBytes": "20"
          },
          "t_contract(IERC20Upgradeable)1367": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IStakeManager)4905": {
            "label": "contract IStakeManager",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "bfb43e1e9de4307ffd024ff6129669a31d6dd600c31bad36baf8b006c9c9646a": {
      "address": "0xb0A1Df91157E08F63126Be78A722C096D857D7ce",
      "txHash": "0x2e2a913e2d6ff36d35a0ad4e7ec8758a84f9c94a5bf18b0fd841352ed00baf52",
      "layout": {
        "solcVersion": "0.8.18",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "101",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "201",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "202",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "251",
            "type": "t_contract(IERC20Upgradeable)1367",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:34"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "251",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:35"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "252",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:295"
          },
          {
            "label": "apeCoinStaking",
            "offset": 0,
            "slot": "301",
            "type": "t_contract(IApeCoinStaking)4529",
            "contract": "BendCoinPool",
            "src": "contracts/BendCoinPool.sol:26"
          },
          {
            "label": "wrapApeCoin",
            "offset": 0,
            "slot": "302",
            "type": "t_contract(IERC20Upgradeable)1367",
            "contract": "BendCoinPool",
            "src": "contracts/BendCoinPool.sol:27"
          },
          {
            "label": "staker",
            "offset": 0,
            "slot": "303",
            "type": "t_contract(IStakeManager)4903",
            "contract": "BendCoinPool",
            "src": "contracts/BendCoinPool.sol:28"
          },
          {
            "label": "pendingApeCoin",
            "offset": 0,
            "slot": "304",
            "type": "t_uint256",
            "contract": "BendCoinPool",
            "src": "contracts/BendCoinPool.sol:30"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IApeCoinStaking)4529": {
            "label": "contract IApeCoinStaking",
            "numberOfBytes": "20"
          },
          "t_contract(IERC20Upgradeable)1367": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(IStakeManager)4903": {
            "label": "contract IStakeManager",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
